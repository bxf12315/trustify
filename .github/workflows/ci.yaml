name: ci

on:
  push:
    branches:
      - main
      - release/**
  merge_group:
    types:
      - checks_requested
  pull_request:
    branches:
      - main
      - release/**

env:
  CARGO_TERM_COLOR: always

jobs:

  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Maximize build space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo rm -Rf ${JAVA_HOME_8_X64}
          sudo rm -Rf ${JAVA_HOME_11_X64}
          sudo rm -Rf ${JAVA_HOME_17_X64}
          sudo rm -Rf ${RUBY_PATH}
          df -h

      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2

      - name: Cache Theseus Postgresql Installation
        uses: actions/cache@v4
        with:
          path: ~/.theseus/postgresql
          key: ${{ runner.os }}-theseus-postgresql-${{ hashFiles('**/Cargo.lock') }}
      
      - name: git test
        run: |
        git branch -a
        git ls-remote --heads origin
        
      - name: Install cargo-tarpaulin
        run:  cargo install cargo-tarpaulin
      - name: Format
        run: cargo fmt --check
      - name: Check
        run: cargo check
      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings -D clippy::unwrap_used -D clippy::expect_used

      - name: Start minio
        run: |
          docker compose -f etc/deploy/compose/compose-minio.yaml up -d --wait
      - name: Test Coverage
        if: github.event_name == 'pull_request'
        run: | 
          git diff --name-only main...HEAD > changed_files.txt
          
          cargo tarpaulin --out Html --output-dir ./coverage \
            --packages trustify \
            --changed-files changed_files.txt
      - name: Create PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('./coverage/index.html', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Coverage Report\n${coverage}`
            });
      - name: Test
        run: cargo test --all-features -- --nocapture
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}" # for embedded postgresql
          RUST_LOG: warn,sqlx=error,sea_orm=error

      - name: Export and Validate Generated Openapi Spec
        run: |
          cargo xtask openapi
          if ! git diff --quiet; then
              echo "::error::Uncommitted changes (run 'cargo xtask openapi' after making api changes)"
              exit 1
          fi
      - name: Ensure schemas are up-to-date
        run: |
          cargo xtask generate-schemas
          if ! git diff --quiet; then
              echo "::error::Uncommitted changes (run 'cargo xtask generate-schemas' after making changes to the models)"
              exit 1
          fi
      - name: Check the docs
        run: |
          cd docs/book
          npm ci
          make all
